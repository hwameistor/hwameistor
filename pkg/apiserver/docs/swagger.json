{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/cluster/auth/auth": {
            "post": {
                "description": "Authorize user, return a token and expireAt if success",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Authorization",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.AuthReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.AuthRspBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/auth/info": {
            "get": {
                "description": "Get the status if enable authorization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Auth info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.AuthInfoRspBody"
                        }
                    }
                }
            }
        },
        "/cluster/auth/logout": {
            "post": {
                "description": "Logout the token, if verify token success, delete this token and return success",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout the token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.AuthLogoutRspBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/drbd": {
            "get": {
                "description": "get DRBDSettingGet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "摘要 获取高可用设置",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.DrbdEnableSetting"
                        }
                    }
                }
            },
            "post": {
                "description": "post EnableDRBDSetting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "摘要 高可用设置",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.DrbdEnableSettingReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.DrbdEnableSettingRspBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/events": {
            "get": {
                "description": "EventList 排序  resourceType枚举（Cluster;StorageNode;DiskNode;Pool;Volume;DiskVolume;Disk）  sort枚举 （time、name、type）",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metric"
                ],
                "summary": "摘要 获取审计日志",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resourceName",
                        "name": "resourceName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "resourceType",
                        "name": "resourceType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.EventActionList"
                        }
                    }
                }
            }
        },
        "/cluster/events/:eventName": {
            "get": {
                "description": "EventGet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metric"
                ],
                "summary": "摘要 获取指定事件",
                "parameters": [
                    {
                        "type": "string",
                        "description": "eventName",
                        "name": "eventName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Event"
                        }
                    }
                }
            }
        },
        "/cluster/localdisknodes": {
            "get": {
                "description": "get LocalDiskNodeList",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LocalDiskNode"
                ],
                "summary": "摘要 获取集群磁盘组列表",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LocalDiskNodeList"
                        }
                    }
                }
            }
        },
        "/cluster/localdisks": {
            "get": {
                "description": "get LocalDiskList 状态枚举 (Active、Inactive、Unknown、Pending、Available、Bound)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LocalDisk"
                ],
                "summary": "摘要 获取本地磁盘列表",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LocalDiskList"
                        }
                    }
                }
            }
        },
        "/cluster/nodes": {
            "get": {
                "description": "list StorageNode  驱动状态 [运行中（Ready）,维护中（Maintain）, 离线（Offline)] , 节点状态 [运行中（Ready）,未就绪（NotReady）,未知（Unknown)]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Node"
                ],
                "summary": "摘要 获取存储节点列表",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "nodeState",
                        "name": "nodeState",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "driverState",
                        "name": "driverState",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "fuzzy",
                        "name": "fuzzy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "sort",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StorageNodeList"
                        }
                    }
                }
            }
        },
        "/cluster/nodes/{nodeName}": {
            "get": {
                "description": "get StorageNode 驱动状态 [运行中（Ready）,维护中（Maintain）, 离线（Offline)] , 节点状态 [运行中（Ready）,未就绪（NotReady）,未知（Unknown)]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Node"
                ],
                "summary": "摘要 获取指定存储节点",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StorageNode"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Node"
                ],
                "summary": "Set node enable/disable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.NodeUpdateReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.NodeUpdateRspBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/nodes/{nodeName}/disks": {
            "get": {
                "description": "list StorageNodeDisks 状态枚举 （Active、Inactive、Unknown、Pending、Available、Bound)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Node"
                ],
                "summary": "摘要 获取指定存储节点磁盘列表",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "fuzzy",
                        "name": "fuzzy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "sort",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LocalDiskListByNode"
                        }
                    }
                }
            }
        },
        "/cluster/nodes/{nodeName}/disks/{devicePath}": {
            "post": {
                "description": "post UpdateStorageNodeDisk devicePath i.g /dev/sdb /dev/sdc ...",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Node"
                ],
                "summary": "摘要 更新磁盘",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "devicePath",
                        "name": "devicePath",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "reqBody",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.DiskReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.DiskReqBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/nodes/{nodeName}/disks/{devicePath}/owner": {
            "post": {
                "description": "post SetStorageNodeDiskOwner devicePath i.g /dev/sdb /dev/sdc ...",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Node"
                ],
                "summary": "摘要 更新磁盘owner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "devicePath",
                        "name": "devicePath",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "reqBody",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.DiskReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.DiskReqBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/nodes/{nodeName}/disks/{diskName}": {
            "get": {
                "description": "get GetStorageNodeDisk diskname i.g sdb sdc ...",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Node"
                ],
                "summary": "摘要 获取指定磁盘信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "diskName",
                        "name": "diskName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "fuzzy",
                        "name": "fuzzy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "sort",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LocalDiskInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/nodes/{nodeName}/migrates": {
            "get": {
                "description": "get StorageNodeMigrate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Node"
                ],
                "summary": "摘要 获取指定节点数据卷迁移任务列表",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "migrateOperationName",
                        "name": "migrateOperationName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VolumeOperationListByNode"
                        }
                    }
                }
            }
        },
        "/cluster/nodes/{nodeName}/pools": {
            "get": {
                "description": "get StorageNodePoolsList",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Node"
                ],
                "summary": "摘要 获取指定节点存储池列表信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "fuzzy",
                        "name": "fuzzy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StoragePoolList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/nodes/{nodeName}/pools/{poolName}": {
            "get": {
                "description": "get StorageNodePoolGet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Node"
                ],
                "summary": "摘要 获取指定节点指定存储池信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "poolName",
                        "name": "poolName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StoragePool"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/nodes/{nodeName}/pools/{poolName}/disks": {
            "get": {
                "description": "get StorageNodePoolDisksList",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Node"
                ],
                "summary": "摘要 获取指定节点指定存储池磁盘列表信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "poolName",
                        "name": "poolName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "fuzzy",
                        "name": "fuzzy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LocalDisksItemsList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/nodes/{nodeName}/pools/{poolName}/disks/{diskName}": {
            "get": {
                "description": "get StorageNodePoolDiskGet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Node"
                ],
                "summary": "摘要 获取指定节点指定存储池指定磁盘信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "poolName",
                        "name": "poolName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "diskName",
                        "name": "diskName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LocalDiskInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/operations": {
            "get": {
                "description": "OperationList 状态枚举 （Submitted、AddReplica、SyncReplica、PruneReplica、InProgress、Completed、ToBeAborted、Cancelled、Aborted、Failed）",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metric"
                ],
                "summary": "摘要 获取操作记录列表",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.OperationMetric"
                        }
                    }
                }
            }
        },
        "/cluster/operations/:operationName": {
            "get": {
                "description": "OperationGet eventType枚举 (Migrate、Expand、Convert)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metric"
                ],
                "summary": "摘要 获取指定操作记录",
                "parameters": [
                    {
                        "type": "string",
                        "description": "operationName",
                        "name": "operationName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "eventType",
                        "name": "eventType",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Operation"
                        }
                    }
                }
            }
        },
        "/cluster/pools": {
            "get": {
                "description": "list StoragePools",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool"
                ],
                "summary": "摘要 获取存储池列表信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "fuzzy",
                        "name": "fuzzy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "sort",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StoragePoolList"
                        }
                    }
                }
            }
        },
        "/cluster/pools/expand": {
            "post": {
                "description": "expand new disk for storage pool",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool"
                ],
                "summary": "Storage pool expand",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.StoragePoolExpansionReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StoragePoolExpansionRspBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/pools/{poolName}": {
            "get": {
                "description": "get Pool angel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool"
                ],
                "summary": "摘要 获取指定存储池基本信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "poolName",
                        "name": "poolName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StoragePool"
                        }
                    }
                }
            }
        },
        "/cluster/pools/{poolName}/nodes": {
            "get": {
                "description": "get StorageNodesGetByPoolName",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool"
                ],
                "summary": "摘要 获取指定存储池存储节点列表信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "poolName",
                        "name": "poolName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "fuzzy",
                        "name": "fuzzy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "sort",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StorageNodeListByPool"
                        }
                    }
                }
            }
        },
        "/cluster/pools/{poolName}/nodes/{nodeName}/disks": {
            "get": {
                "description": "get StorageNodeDisksGetByPoolName",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool"
                ],
                "summary": "摘要 获取指定存储池指定存储节点磁盘列表信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "nodeName",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "poolName",
                        "name": "poolName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "fuzzy",
                        "name": "fuzzy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.NodeDiskListByPool"
                        }
                    }
                }
            }
        },
        "/cluster/snapshots": {
            "get": {
                "description": "list Snapshot",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snapshot"
                ],
                "summary": "摘要 全局快照列表展式",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "snapshotName",
                        "name": "snapshotName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SnapshotList"
                        }
                    }
                }
            }
        },
        "/cluster/status": {
            "get": {
                "description": "get ModuleStatus",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metric"
                ],
                "summary": "摘要 获取基础监控指标",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ModuleStatus"
                        }
                    }
                }
            }
        },
        "/cluster/volumegroups": {
            "get": {
                "description": "get VolumeGroupList",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VolumeGroup"
                ],
                "summary": "摘要 获取数据卷组列表",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "fuzzy",
                        "name": "fuzzy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "sort",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VolumeGroupList"
                        }
                    }
                }
            }
        },
        "/cluster/volumegroups/{vgName}": {
            "get": {
                "description": "get VolumeGroupGet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VolumeGroup"
                ],
                "summary": "摘要 查看数据卷组",
                "parameters": [
                    {
                        "type": "string",
                        "description": "vgName",
                        "name": "vgName",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VolumeGroup"
                        }
                    }
                }
            }
        },
        "/cluster/volumes": {
            "get": {
                "description": "list Volume",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volume"
                ],
                "summary": "摘要 获取数据卷列表信息 数据卷状态枚举 （ToBeMounted、Created、Creating、Ready、NotReady、ToBeDeleted、Deleted）",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "fuzzy",
                        "name": "fuzzy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "sort",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VolumeList"
                        }
                    }
                }
            }
        },
        "/cluster/volumes/{volumeName}": {
            "get": {
                "description": "get Volume angel1",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volume"
                ],
                "summary": "摘要 获取指定数据卷基本信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Volume"
                        }
                    }
                }
            }
        },
        "/cluster/volumes/{volumeName}/convert": {
            "get": {
                "description": "get GetVolumeConvertOperation 状态枚举 （Submitted、InProgress、Completed、ToBeAborted、Aborted）",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volume"
                ],
                "summary": "摘要 获取指定数据卷转换操作",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VolumeConvertOperation"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            },
            "post": {
                "description": "post VolumeConvertOperation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volume"
                ],
                "summary": "摘要 指定数据卷转换操作",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "reqBody",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.VolumeConvertReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VolumeConvertRspBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/volumes/{volumeName}/events": {
            "get": {
                "description": "get VolumeOperation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volume"
                ],
                "summary": "摘要 获取指定数据卷审计日志  sort=time ,先不做按操作查询",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "action",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.EventActionList"
                        }
                    }
                }
            }
        },
        "/cluster/volumes/{volumeName}/expand": {
            "get": {
                "description": "get GetVolumeExpandOperation 状态枚举 （Submitted、InProgress、Completed、ToBeAborted、Aborted）",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volume"
                ],
                "summary": "摘要 获取指定数据卷扩容操作",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VolumeExpandOperation"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            },
            "post": {
                "description": "post VolumeExpandOperation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volume"
                ],
                "summary": "摘要 指定数据卷扩容操作",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "reqBody",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.VolumeExpandReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VolumeExpandRspBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/volumes/{volumeName}/migrate": {
            "get": {
                "description": "get GetVolumeMigrateOperation 状态枚举 （Submitted、AddReplica、SyncReplica、PruneReplica、InProgress、Completed、ToBeAborted、Cancelled、Aborted、Failed）",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volume"
                ],
                "summary": "摘要 获取指定数据卷迁移操作",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VolumeMigrateOperation"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            },
            "post": {
                "description": "post VolumeMigrateOperation body i.g. body { SrcNode string ,SelectedNode string}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volume"
                ],
                "summary": "摘要 指定数据卷迁移操作",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "reqBody",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.VolumeMigrateReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VolumeMigrateRspBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        },
        "/cluster/volumes/{volumeName}/operations": {
            "get": {
                "description": "get VolumeOperation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volume"
                ],
                "summary": "摘要 获取指定数据卷操作记录信息 状态枚举 (Submitted、AddReplica、SyncReplica、PruneReplica、InProgress、Completed、ToBeAborted、Cancelled、Aborted、Failed)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "volumeEventName",
                        "name": "volumeEventName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VolumeOperationByVolume"
                        }
                    }
                }
            }
        },
        "/cluster/volumes/{volumeName}/replicas": {
            "get": {
                "description": "list volumes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volume"
                ],
                "summary": "摘要 获取指定数据卷的副本列表信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "volumeReplicaName",
                        "name": "volumeReplicaName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VolumeReplicaList"
                        }
                    }
                }
            }
        },
        "/cluster/volumes/{volumeName}/snapshot": {
            "get": {
                "description": "get VolumeSnapshotList",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volume"
                ],
                "summary": "摘要 获取指定数据卷快照操作 快照状态枚举 (Creating, Ready, NotReady, ToBeDeleted, Deleted）",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volumeName",
                        "name": "volumeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "snapshotName",
                        "name": "snapshotName",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SnapshotList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.RspFailBody"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.AuthInfoRspBody": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "api.AuthLogoutRspBody": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "api.AuthReqBody": {
            "type": "object",
            "properties": {
                "accessId": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string"
                }
            }
        },
        "api.AuthRspBody": {
            "type": "object",
            "properties": {
                "expireAt": {
                    "type": "integer"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "api.DiskReqBody": {
            "type": "object",
            "properties": {
                "reserve": {
                    "type": "boolean"
                }
            }
        },
        "api.DrbdEnableSetting": {
            "type": "object",
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/api.State"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "api.DrbdEnableSettingReqBody": {
            "type": "object",
            "properties": {
                "enable": {
                    "type": "boolean"
                }
            }
        },
        "api.DrbdEnableSettingRspBody": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/api.DrbdEnableSetting"
                }
            }
        },
        "api.Event": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.EventSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.EventStatus"
                }
            }
        },
        "api.EventAction": {
            "type": "object",
            "properties": {
                "eventRecord": {
                    "$ref": "#/definitions/v1alpha1.EventRecord"
                },
                "resourceName": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string"
                }
            }
        },
        "api.EventActionList": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.EventAction"
                    }
                },
                "pagination": {
                    "description": "page 信息",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.Pagination"
                        }
                    ]
                }
            }
        },
        "api.LocalDiskInfo": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "availableCapacityBytes": {
                    "description": "AvailableCapacityBytes 可用容量",
                    "type": "integer"
                },
                "diskPathShort": {
                    "description": "diskPathShort 磁盘路径简写",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "localStoragePooLName": {
                    "description": "LocalStoragePooLName 存储池名称",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.LocalDiskSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.LocalDiskStatus"
                },
                "totalCapacityBytes": {
                    "description": "TotalCapacityBytes 总容量",
                    "type": "integer"
                }
            }
        },
        "api.LocalDiskList": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "LocalDisks 集群磁盘列表",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.LocalDisk"
                    }
                }
            }
        },
        "api.LocalDiskListByNode": {
            "type": "object",
            "properties": {
                "diskPathShort": {
                    "description": "diskPathShort 磁盘路径简写",
                    "type": "string"
                },
                "items": {
                    "description": "localDisks 节点磁盘列表",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.LocalDiskInfo"
                    }
                },
                "nodeName": {
                    "description": "nodeName 节点名称",
                    "type": "string"
                },
                "pagination": {
                    "description": "page 信息",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.Pagination"
                        }
                    ]
                }
            }
        },
        "api.LocalDiskNodeList": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "LocalDiskNodes 集群磁盘组列表",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.LocalDiskNode"
                    }
                }
            }
        },
        "api.LocalDisksItemsList": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "localDisks 节点磁盘列表",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.LocalDiskInfo"
                    }
                }
            }
        },
        "api.ModuleState": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "组件名称",
                    "type": "string"
                },
                "state": {
                    "description": "组件状态 运行中 未就绪",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.State"
                        }
                    ]
                }
            }
        },
        "api.ModuleStatus": {
            "type": "object",
            "properties": {
                "componentStatus": {
                    "$ref": "#/definitions/v1alpha1.ComponentStatus"
                },
                "diskReserveState": {
                    "type": "string"
                },
                "drbdAdapterCreated": {
                    "type": "boolean"
                },
                "drbdAdapterCreatedJobNum": {
                    "type": "integer"
                },
                "installedCRDS": {
                    "type": "boolean"
                },
                "modulesStatus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.ModuleState"
                    }
                },
                "phase": {
                    "type": "string"
                }
            }
        },
        "api.NodeDiskListByPool": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "localDisks 节点磁盘列表",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.LocalDiskInfo"
                    }
                },
                "nodeName": {
                    "description": "nodeName 节点名称",
                    "type": "string"
                },
                "pagination": {
                    "description": "page 信息",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.Pagination"
                        }
                    ]
                },
                "poolName": {
                    "description": "PoolName 存储池名称",
                    "type": "string"
                }
            }
        },
        "api.NodeUpdateReqBody": {
            "type": "object",
            "properties": {
                "enable": {
                    "type": "boolean"
                }
            }
        },
        "api.NodeUpdateRspBody": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "api.Operation": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "详细描述",
                    "type": "string"
                },
                "endTime": {
                    "description": "结束时间",
                    "type": "string"
                },
                "eventName": {
                    "description": "事件名称",
                    "type": "string"
                },
                "eventType": {
                    "description": "事件类型",
                    "type": "string"
                },
                "localVolumeName": {
                    "description": "操作对象",
                    "type": "string"
                },
                "startTime": {
                    "description": "开始时间",
                    "type": "string"
                },
                "status": {
                    "description": "状态",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.State"
                        }
                    ]
                }
            }
        },
        "api.OperationMetric": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Operation"
                    }
                },
                "pagination": {
                    "description": "page 信息",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.Pagination"
                        }
                    ]
                }
            }
        },
        "api.Pagination": {
            "type": "object",
            "properties": {
                "page": {
                    "description": "当前页索引，从 1 开始，为 0 时，会自动重置为默认值 constants.DefaultPage",
                    "type": "integer"
                },
                "pageSize": {
                    "description": "每页数据量，为 -1 时表示查询全部，为 0 时会重置为默认值\nconstants.DefaultPageSize",
                    "type": "integer"
                },
                "pages": {
                    "description": "总页数",
                    "type": "integer"
                },
                "total": {
                    "description": "总共有多少条目，请求时可以不用传递",
                    "type": "integer"
                }
            }
        },
        "api.RspFailBody": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "errcode": {
                    "type": "integer"
                }
            }
        },
        "api.Snapshot": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeSnapshotSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeSnapshotStatus"
                }
            }
        },
        "api.SnapshotList": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Snapshot"
                    }
                },
                "pagination": {
                    "description": "page 信息",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.Pagination"
                        }
                    ]
                }
            }
        },
        "api.State": {
            "type": "string",
            "enum": [
                "Submitted",
                "AddReplica",
                "SyncReplica",
                "PruneReplica",
                "InProgress",
                "Completed",
                "ToBeAborted",
                "Cancelled",
                "Aborted",
                "Failed",
                "ToBeMounted",
                "",
                "Created",
                "Creating",
                "Ready",
                "NotReady",
                "ToBeDeleted",
                "Deleted",
                "Unknown",
                "Invalid",
                "Creating",
                "Ready",
                "NotReady",
                "ToBeDeleted",
                "Deleted",
                "Ready",
                "Maintain",
                "Offline",
                "",
                "Unknown",
                "ReadyAndNotReady",
                "Healthy",
                "NotReady",
                "",
                "Ready",
                "Maintain",
                "Offline",
                "Unknown",
                "Unclaimed",
                "Released",
                "Claimed",
                "Inuse",
                "Reserved",
                "ReleaseReserved",
                "",
                "ClaimedAndUnclaimed",
                "Pending",
                "Bound",
                "Available",
                "Active",
                "Inactive",
                "Unknown",
                "Running",
                "NotReady",
                "Enabled",
                "Disabled",
                "Succeed",
                "Failed"
            ],
            "x-enum-varnames": [
                "OperationStateSubmitted",
                "OperationStateMigrateAddReplica",
                "OperationStateMigrateSyncReplica",
                "OperationStateMigratePruneReplica",
                "OperationStateInProgress",
                "OperationStateCompleted",
                "OperationStateToBeAborted",
                "OperationStateAborting",
                "OperationStateAborted",
                "OperationStateFailed",
                "VolumeStateToBeUnmount",
                "VolumeStateEmpty",
                "VolumeStateCreated",
                "VolumeStateCreating",
                "VolumeStateReady",
                "VolumeStateNotReady",
                "VolumeStateToBeDeleted",
                "VolumeStateDeleted",
                "VolumeStateUnknown",
                "VolumeReplicaStateInvalid",
                "VolumeReplicaStateCreating",
                "VolumeReplicaStateReady",
                "VolumeReplicaStateNotReady",
                "VolumeReplicaStateToBeDeleted",
                "VolumeReplicaStateDeleted",
                "NodeStateReady",
                "NodeStateMaintain",
                "NodeStateOffline",
                "NodeStateEmpty",
                "NodeStateUnknown",
                "NodeStateReadyAndNotReady",
                "NodeStateHealthy",
                "NodeStateNotReady",
                "DriverStateEmpty",
                "DriverStateReady",
                "DriverStateMaintain",
                "DriverStateOffline",
                "DriverStateUnknown",
                "LocalDiskUnclaimed",
                "LocalDiskReleased",
                "LocalDiskClaimed",
                "LocalDiskInUse",
                "LocalDiskReserved",
                "LocalDiskReleaseReserved",
                "LocalDiskEmpty",
                "LocalDiskClaimedAndUnclaimed",
                "LocalDiskPending",
                "LocalDiskBound",
                "LocalDiskAvailable",
                "LocalDiskActive",
                "LocalDiskInactive",
                "LocalDiskUnknown",
                "ModuleStatusRunning",
                "ModuleStatusNotReady",
                "DrbdModuleStatusEnabled",
                "DrbdModuleStatusDisabled",
                "ReservedSucceedState",
                "ReservedFailedState"
            ]
        },
        "api.StorageNode": {
            "type": "object",
            "properties": {
                "K8sNode": {
                    "$ref": "#/definitions/v1.Node"
                },
                "k8SNodeState": {
                    "$ref": "#/definitions/api.State"
                },
                "localDiskNode": {
                    "$ref": "#/definitions/v1alpha1.LocalDiskNode"
                },
                "localStorageNode": {
                    "$ref": "#/definitions/v1alpha1.LocalStorageNode"
                }
            }
        },
        "api.StorageNodeList": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "StorageNodes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.StorageNode"
                    }
                },
                "pagination": {
                    "description": "page 信息",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.Pagination"
                        }
                    ]
                }
            }
        },
        "api.StorageNodeListByPool": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "StorageNodes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.StorageNode"
                    }
                },
                "pagination": {
                    "description": "page 信息",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.Pagination"
                        }
                    ]
                },
                "storagePoolName": {
                    "description": "StoragePoolName 存储池名称",
                    "type": "string"
                }
            }
        },
        "api.StorageNodePool": {
            "type": "object",
            "properties": {
                "class": {
                    "description": "Supported class: HDD, SSD, NVMe\n+kubebuilder:validation:Enum:=HDD;SSD;NVMe",
                    "type": "string"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.LocalDevice"
                    }
                },
                "freeCapacityBytes": {
                    "type": "integer"
                },
                "freeVolumeCount": {
                    "type": "integer"
                },
                "name": {
                    "description": "Supported pool name: HDD_POOL, SSD_POOL, NVMe_POOL",
                    "type": "string"
                },
                "nodeName": {
                    "description": "NodesName Pool所在节点",
                    "type": "string"
                },
                "path": {
                    "description": "VG path",
                    "type": "string"
                },
                "totalCapacityBytes": {
                    "type": "integer"
                },
                "totalVolumeCount": {
                    "type": "integer"
                },
                "type": {
                    "description": "Supported type: REGULAR\n+kubebuilder:validation:Enum:=REGULAR\n+kubebuilder:default:=REGULAR",
                    "type": "string"
                },
                "usedCapacityBytes": {
                    "type": "integer"
                },
                "usedVolumeCount": {
                    "type": "integer"
                },
                "volumeCapacityBytesLimit": {
                    "type": "integer"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.StoragePool": {
            "type": "object",
            "properties": {
                "allocatedCapacityBytes": {
                    "description": "AllocatedCapacityBytes 存储池已经分配存储容量",
                    "type": "integer"
                },
                "createTime": {
                    "description": "createTime 创建时间",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.StorageNodePool"
                    }
                },
                "nodeNames": {
                    "description": "NodesNames Pool所在节点列表",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "poolName": {
                    "description": "Supported pool name: HDD_POOL, SSD_POOL, NVMe_POOL 存储池名称",
                    "type": "string"
                },
                "totalCapacityBytes": {
                    "description": "TotalCapacityBytes 存储池对应存储总容量",
                    "type": "integer"
                }
            }
        },
        "api.StoragePoolExpansionReqBody": {
            "type": "object",
            "properties": {
                "diskType": {
                    "description": "HDD/SSD/NVME",
                    "type": "string"
                },
                "nodeName": {
                    "type": "string"
                },
                "owner": {
                    "description": "local-storage/local-disk-manager",
                    "type": "string"
                }
            }
        },
        "api.StoragePoolExpansionRspBody": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "api.StoragePoolList": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "storagePools",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.StoragePool"
                    }
                },
                "pagination": {
                    "description": "page 信息",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.Pagination"
                        }
                    ]
                }
            }
        },
        "api.Volume": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeStatus"
                }
            }
        },
        "api.VolumeConvertInfo": {
            "type": "object",
            "properties": {
                "replicaNum": {
                    "type": "integer"
                },
                "volumeName": {
                    "type": "string"
                }
            }
        },
        "api.VolumeConvertOperation": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeConvertSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeConvertStatus"
                }
            }
        },
        "api.VolumeConvertReqBody": {
            "type": "object",
            "properties": {
                "abort": {
                    "type": "boolean"
                }
            }
        },
        "api.VolumeConvertRspBody": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/api.VolumeConvertInfo"
                }
            }
        },
        "api.VolumeExpandInfo": {
            "type": "object",
            "properties": {
                "targetCapacityBytes": {
                    "type": "integer"
                },
                "volumeName": {
                    "type": "string"
                }
            }
        },
        "api.VolumeExpandOperation": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeExpandSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeExpandStatus"
                }
            }
        },
        "api.VolumeExpandReqBody": {
            "type": "object",
            "properties": {
                "abort": {
                    "type": "boolean"
                },
                "targetCapacity": {
                    "description": "VolumeName     string `json:\"volumeName,omitempty\"`",
                    "type": "string"
                }
            }
        },
        "api.VolumeExpandRspBody": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/api.VolumeExpandInfo"
                }
            }
        },
        "api.VolumeGroup": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "items": {
                    "description": "Volumes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.LocalVolume"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeGroupSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeGroupStatus"
                }
            }
        },
        "api.VolumeGroupList": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "VolumeGroups",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.VolumeGroup"
                    }
                }
            }
        },
        "api.VolumeList": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Volume"
                    }
                },
                "pagination": {
                    "description": "page 信息",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.Pagination"
                        }
                    ]
                }
            }
        },
        "api.VolumeMigrateInfo": {
            "type": "object",
            "properties": {
                "selectedNode": {
                    "type": "string"
                },
                "srcNode": {
                    "type": "string"
                },
                "volumeName": {
                    "type": "string"
                }
            }
        },
        "api.VolumeMigrateOperation": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeMigrateSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeMigrateStatus"
                }
            }
        },
        "api.VolumeMigrateReqBody": {
            "type": "object",
            "properties": {
                "abort": {
                    "type": "boolean"
                },
                "selectedNode": {
                    "type": "string"
                },
                "srcNode": {
                    "type": "string"
                }
            }
        },
        "api.VolumeMigrateRspBody": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/api.VolumeMigrateInfo"
                }
            }
        },
        "api.VolumeOperationByVolume": {
            "type": "object",
            "properties": {
                "VolumeConvertOperations": {
                    "description": "VolumeConvertOperations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.VolumeConvertOperation"
                    }
                },
                "VolumeExpandOperations": {
                    "description": "VolumeExpandOperations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.VolumeExpandOperation"
                    }
                },
                "volumeMigrateOperations": {
                    "description": "// OperationList\nOperationList []Operation `json:\"items\"`\nVolumeMigrateOperations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.VolumeMigrateOperation"
                    }
                },
                "volumeName": {
                    "description": "VolumeName",
                    "type": "string"
                }
            }
        },
        "api.VolumeOperationListByNode": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "VolumeOperations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.VolumeMigrateOperation"
                    }
                },
                "nodeName": {
                    "description": "node name",
                    "type": "string"
                },
                "pagination": {
                    "description": "page 信息",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.Pagination"
                        }
                    ]
                }
            }
        },
        "api.VolumeReplica": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeReplicaSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeReplicaStatus"
                }
            }
        },
        "api.VolumeReplicaList": {
            "type": "object",
            "properties": {
                "volumeName": {
                    "description": "volume name",
                    "type": "string"
                },
                "volumeReplicas": {
                    "description": "VolumeReplicas",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.VolumeReplica"
                    }
                }
            }
        },
        "github_com_hwameistor_hwameistor_pkg_apis_hwameistor_v1alpha1.ConditionStatus": {
            "type": "string",
            "enum": [
                "True",
                "False",
                "Unknown"
            ],
            "x-enum-varnames": [
                "ConditionTrue",
                "ConditionFalse",
                "ConditionUnknown"
            ]
        },
        "k8s_io_api_core_v1.ConditionStatus": {
            "type": "string",
            "enum": [
                "True",
                "False",
                "Unknown"
            ],
            "x-enum-varnames": [
                "ConditionTrue",
                "ConditionFalse",
                "ConditionUnknown"
            ]
        },
        "resource.Quantity": {
            "type": "object",
            "properties": {
                "Format": {
                    "type": "string"
                }
            }
        },
        "v1.AttachedVolume": {
            "type": "object",
            "properties": {
                "devicePath": {
                    "description": "DevicePath represents the device path where the volume should be available",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the attached volume",
                    "type": "string"
                }
            }
        },
        "v1.ConfigMapNodeConfigSource": {
            "type": "object",
            "properties": {
                "kubeletConfigKey": {
                    "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure\nThis field is required in all cases.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the metadata.name of the referenced ConfigMap.\nThis field is required in all cases.",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace is the metadata.namespace of the referenced ConfigMap.\nThis field is required in all cases.",
                    "type": "string"
                },
                "resourceVersion": {
                    "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap.\nThis field is forbidden in Node.Spec, and required in Node.Status.\n+optional",
                    "type": "string"
                },
                "uid": {
                    "description": "UID is the metadata.UID of the referenced ConfigMap.\nThis field is forbidden in Node.Spec, and required in Node.Status.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ContainerImage": {
            "type": "object",
            "properties": {
                "names": {
                    "description": "Names by which this image is known.\ne.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sizeBytes": {
                    "description": "The size of the image in bytes.\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.DaemonEndpoint": {
            "type": "object",
            "properties": {
                "Port": {
                    "description": "Port number of the given endpoint.",
                    "type": "integer"
                }
            }
        },
        "v1.FieldsV1": {
            "type": "object"
        },
        "v1.ManagedFieldsEntry": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted.",
                    "type": "string"
                },
                "fieldsType": {
                    "description": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\"",
                    "type": "string"
                },
                "fieldsV1": {
                    "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FieldsV1"
                        }
                    ]
                },
                "manager": {
                    "description": "Manager is an identifier of the workflow managing these fields.",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ManagedFieldsOperationType"
                        }
                    ]
                },
                "subresource": {
                    "description": "Subresource is the name of the subresource used to update that object, or\nempty string if the object was updated through the main resource. The\nvalue of this field is used to distinguish between managers, even if they\nshare the same name. For example, a status update will be distinct from a\nregular update using the same manager name.\nNote that the APIVersion field is not related to the Subresource field and\nit always corresponds to the version of the main resource.",
                    "type": "string"
                },
                "time": {
                    "description": "Time is the timestamp of when the ManagedFields entry was added. The\ntimestamp will also be updated if a field is added, the manager\nchanges any of the owned fields value or removes a field. The\ntimestamp does not update when a field is removed from the entry\nbecause another manager took it over.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ManagedFieldsOperationType": {
            "type": "string",
            "enum": [
                "Apply",
                "Update"
            ],
            "x-enum-varnames": [
                "ManagedFieldsOperationApply",
                "ManagedFieldsOperationUpdate"
            ]
        },
        "v1.Node": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Spec defines the behavior of a node.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSpec"
                        }
                    ]
                },
                "status": {
                    "description": "Most recently observed status of the node.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeStatus"
                        }
                    ]
                }
            }
        },
        "v1.NodeAddress": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The node address.",
                    "type": "string"
                },
                "type": {
                    "description": "Node address type, one of Hostname, ExternalIP or InternalIP.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeAddressType"
                        }
                    ]
                }
            }
        },
        "v1.NodeAddressType": {
            "type": "string",
            "enum": [
                "Hostname",
                "InternalIP",
                "ExternalIP",
                "InternalDNS",
                "ExternalDNS"
            ],
            "x-enum-varnames": [
                "NodeHostName",
                "NodeInternalIP",
                "NodeExternalIP",
                "NodeInternalDNS",
                "NodeExternalDNS"
            ]
        },
        "v1.NodeCondition": {
            "type": "object",
            "properties": {
                "lastHeartbeatTime": {
                    "description": "Last time we got an update on a given condition.\n+optional",
                    "type": "string"
                },
                "lastTransitionTime": {
                    "description": "Last time the condition transit from one status to another.\n+optional",
                    "type": "string"
                },
                "message": {
                    "description": "Human readable message indicating details about last transition.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason for the condition's last transition.\n+optional",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type of node condition.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConditionType"
                        }
                    ]
                }
            }
        },
        "v1.NodeConditionType": {
            "type": "string",
            "enum": [
                "Ready",
                "MemoryPressure",
                "DiskPressure",
                "PIDPressure",
                "NetworkUnavailable"
            ],
            "x-enum-varnames": [
                "NodeReady",
                "NodeMemoryPressure",
                "NodeDiskPressure",
                "NodePIDPressure",
                "NodeNetworkUnavailable"
            ]
        },
        "v1.NodeConfigSource": {
            "type": "object",
            "properties": {
                "configMap": {
                    "description": "ConfigMap is a reference to a Node's ConfigMap",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapNodeConfigSource"
                        }
                    ]
                }
            }
        },
        "v1.NodeConfigStatus": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active reports the checkpointed config the node is actively using.\nActive will represent either the current version of the Assigned config,\nor the current LastKnownGood config, depending on whether attempting to use the\nAssigned config results in an error.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConfigSource"
                        }
                    ]
                },
                "assigned": {
                    "description": "Assigned reports the checkpointed config the node will try to use.\nWhen Node.Spec.ConfigSource is updated, the node checkpoints the associated\nconfig payload to local disk, along with a record indicating intended\nconfig. The node refers to this record to choose its config checkpoint, and\nreports this record in Assigned. Assigned only updates in the status after\nthe record has been checkpointed to disk. When the Kubelet is restarted,\nit tries to make the Assigned config the Active config by loading and\nvalidating the checkpointed payload identified by Assigned.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConfigSource"
                        }
                    ]
                },
                "error": {
                    "description": "Error describes any problems reconciling the Spec.ConfigSource to the Active config.\nErrors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned\nrecord, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting\nto load or validate the Assigned config, etc.\nErrors may occur at different points while syncing config. Earlier errors (e.g. download or\ncheckpointing errors) will not result in a rollback to LastKnownGood, and may resolve across\nKubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in\na rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error\nby fixing the config assigned in Spec.ConfigSource.\nYou can find additional information for debugging by searching the error message in the Kubelet log.\nError is a human-readable description of the error state; machines can check whether or not Error\nis empty, but should not rely on the stability of the Error text across Kubelet versions.\n+optional",
                    "type": "string"
                },
                "lastKnownGood": {
                    "description": "LastKnownGood reports the checkpointed config the node will fall back to\nwhen it encounters an error attempting to use the Assigned config.\nThe Assigned config becomes the LastKnownGood config when the node determines\nthat the Assigned config is stable and correct.\nThis is currently implemented as a 10-minute soak period starting when the local\nrecord of Assigned config is updated. If the Assigned config is Active at the end\nof this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is\nreset to nil (use local defaults), the LastKnownGood is also immediately reset to nil,\nbecause the local default config is always assumed good.\nYou should not make assumptions about the node's method of determining config stability\nand correctness, as this may change or become configurable in the future.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConfigSource"
                        }
                    ]
                }
            }
        },
        "v1.NodeDaemonEndpoints": {
            "type": "object",
            "properties": {
                "kubeletEndpoint": {
                    "description": "Endpoint on which Kubelet is listening.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DaemonEndpoint"
                        }
                    ]
                }
            }
        },
        "v1.NodePhase": {
            "type": "string",
            "enum": [
                "Pending",
                "Running",
                "Terminated"
            ],
            "x-enum-varnames": [
                "NodePending",
                "NodeRunning",
                "NodeTerminated"
            ]
        },
        "v1.NodeSpec": {
            "type": "object",
            "properties": {
                "configSource": {
                    "description": "Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed from Kubelets as of 1.24 and will be fully removed in 1.26.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConfigSource"
                        }
                    ]
                },
                "externalID": {
                    "description": "Deprecated. Not all kubelets will set this field. Remove field after 1.13.\nsee: https://issues.k8s.io/61966\n+optional",
                    "type": "string"
                },
                "podCIDR": {
                    "description": "PodCIDR represents the pod IP range assigned to the node.\n+optional",
                    "type": "string"
                },
                "podCIDRs": {
                    "description": "podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this\nfield is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for\neach of IPv4 and IPv6.\n+optional\n+patchStrategy=merge",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "providerID": {
                    "description": "ID of the node assigned by the cloud provider in the format: \u003cProviderName\u003e://\u003cProviderSpecificNodeID\u003e\n+optional",
                    "type": "string"
                },
                "taints": {
                    "description": "If specified, the node's taints.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Taint"
                    }
                },
                "unschedulable": {
                    "description": "Unschedulable controls node schedulability of new pods. By default, node is schedulable.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.NodeStatus": {
            "type": "object",
            "properties": {
                "addresses": {
                    "description": "List of addresses reachable to the node.\nQueried from cloud provider, if available.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#addresses\nNote: This field is declared as mergeable, but the merge key is not sufficiently\nunique, which can cause data corruption when it is merged. Callers should instead\nuse a full-replacement patch. See http://pr.k8s.io/79391 for an example.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeAddress"
                    }
                },
                "allocatable": {
                    "description": "Allocatable represents the resources of a node that are available for scheduling.\nDefaults to Capacity.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "capacity": {
                    "description": "Capacity represents the total resources of a node.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "conditions": {
                    "description": "Conditions is an array of current observed node conditions.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#condition\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeCondition"
                    }
                },
                "config": {
                    "description": "Status of the config assigned to the node via the dynamic Kubelet config feature.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConfigStatus"
                        }
                    ]
                },
                "daemonEndpoints": {
                    "description": "Endpoints of daemons running on the Node.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeDaemonEndpoints"
                        }
                    ]
                },
                "images": {
                    "description": "List of container images on this node\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerImage"
                    }
                },
                "nodeInfo": {
                    "description": "Set of ids/uuids to uniquely identify the node.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#info\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSystemInfo"
                        }
                    ]
                },
                "phase": {
                    "description": "NodePhase is the recently observed lifecycle phase of the node.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#phase\nThe field is never populated, and now is deprecated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodePhase"
                        }
                    ]
                },
                "volumesAttached": {
                    "description": "List of volumes that are attached to the node.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.AttachedVolume"
                    }
                },
                "volumesInUse": {
                    "description": "List of attachable volumes in use (mounted) by the node.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.NodeSystemInfo": {
            "type": "object",
            "properties": {
                "architecture": {
                    "description": "The Architecture reported by the node",
                    "type": "string"
                },
                "bootID": {
                    "description": "Boot ID reported by the node.",
                    "type": "string"
                },
                "containerRuntimeVersion": {
                    "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).",
                    "type": "string"
                },
                "kernelVersion": {
                    "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).",
                    "type": "string"
                },
                "kubeProxyVersion": {
                    "description": "KubeProxy Version reported by the node.",
                    "type": "string"
                },
                "kubeletVersion": {
                    "description": "Kubelet Version reported by the node.",
                    "type": "string"
                },
                "machineID": {
                    "description": "MachineID reported by the node. For unique machine identification\nin the cluster this field is preferred. Learn more from man(5)\nmachine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html",
                    "type": "string"
                },
                "operatingSystem": {
                    "description": "The Operating System reported by the node",
                    "type": "string"
                },
                "osImage": {
                    "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).",
                    "type": "string"
                },
                "systemUUID": {
                    "description": "SystemUUID reported by the node. For unique machine identification\nMachineID is preferred. This field is specific to Red Hat hosts\nhttps://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid",
                    "type": "string"
                }
            }
        },
        "v1.ObjectMeta": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "clusterName": {
                    "description": "Deprecated: ClusterName is a legacy field that was always cleared by\nthe system and never used; it will be removed completely in 1.25.\n\nThe name in the go struct is changed to help clients detect\naccidental use.\n\n+optional",
                    "type": "string"
                },
                "creationTimestamp": {
                    "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "type": "string"
                },
                "deletionGracePeriodSeconds": {
                    "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
                    "type": "integer"
                },
                "deletionTimestamp": {
                    "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "type": "string"
                },
                "finalizers": {
                    "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "generateName": {
                    "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
                    "type": "string"
                },
                "generation": {
                    "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
                    "type": "integer"
                },
                "labels": {
                    "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "managedFields": {
                    "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ManagedFieldsEntry"
                    }
                },
                "name": {
                    "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional",
                    "type": "string"
                },
                "ownerReferences": {
                    "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.OwnerReference"
                    }
                },
                "resourceVersion": {
                    "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
                    "type": "string"
                },
                "selfLink": {
                    "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
                    "type": "string"
                },
                "uid": {
                    "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ObjectReference": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.\n+optional",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n+optional",
                    "type": "string"
                },
                "resourceVersion": {
                    "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.OwnerReference": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                },
                "blockOwnerDeletion": {
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
                    "type": "boolean"
                },
                "controller": {
                    "description": "If true, this reference points to the managing controller.\n+optional",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                    "type": "string"
                }
            }
        },
        "v1.ResourceList": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/resource.Quantity"
            }
        },
        "v1.Taint": {
            "type": "object",
            "properties": {
                "effect": {
                    "description": "Required. The effect of the taint on pods\nthat do not tolerate the taint.\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaintEffect"
                        }
                    ]
                },
                "key": {
                    "description": "Required. The taint key to be applied to a node.",
                    "type": "string"
                },
                "timeAdded": {
                    "description": "TimeAdded represents the time at which the taint was added.\nIt is only written for NoExecute taints.\n+optional",
                    "type": "string"
                },
                "value": {
                    "description": "The taint value corresponding to the taint key.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.TaintEffect": {
            "type": "string",
            "enum": [
                "NoSchedule",
                "PreferNoSchedule",
                "NoExecute"
            ],
            "x-enum-varnames": [
                "TaintEffectNoSchedule",
                "TaintEffectPreferNoSchedule",
                "TaintEffectNoExecute"
            ]
        },
        "v1alpha1.AccessibilityTopology": {
            "type": "object",
            "properties": {
                "nodes": {
                    "description": "Nodes is the collection of storage nodes the volume replicas must locate at",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "regions": {
                    "description": "regions where the volume replicas should be distributed across, it's Optional\n+kubebuilder:default:={default}",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "zones": {
                    "description": "zones where the volume replicas should be distributed across, it's Optional\n+kubebuilder:default:={default}",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1alpha1.AdmissionControllerStatus": {
            "type": "object",
            "properties": {
                "health": {
                    "type": "string"
                },
                "instances": {
                    "$ref": "#/definitions/v1alpha1.DeployStatus"
                }
            }
        },
        "v1alpha1.ApiServerStatus": {
            "type": "object",
            "properties": {
                "health": {
                    "type": "string"
                },
                "instances": {
                    "$ref": "#/definitions/v1alpha1.DeployStatus"
                }
            }
        },
        "v1alpha1.ComponentStatus": {
            "type": "object",
            "properties": {
                "admissionController": {
                    "$ref": "#/definitions/v1alpha1.AdmissionControllerStatus"
                },
                "apiServer": {
                    "$ref": "#/definitions/v1alpha1.ApiServerStatus"
                },
                "evictor": {
                    "$ref": "#/definitions/v1alpha1.EvictorStatus"
                },
                "exporter": {
                    "$ref": "#/definitions/v1alpha1.ExporterStatus"
                },
                "localDiskManager": {
                    "$ref": "#/definitions/v1alpha1.LocalDiskManagerStatus"
                },
                "localStorage": {
                    "$ref": "#/definitions/v1alpha1.LocalStorageStatus"
                },
                "scheduler": {
                    "$ref": "#/definitions/v1alpha1.SchedulerStatus"
                }
            }
        },
        "v1alpha1.DeployStatus": {
            "type": "object",
            "properties": {
                "availablePodCount": {
                    "type": "integer"
                },
                "desiredPodCount": {
                    "type": "integer"
                },
                "pods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.PodStatus"
                    }
                },
                "workloadName": {
                    "type": "string"
                },
                "workloadType": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.DiskAttributes": {
            "type": "object",
            "properties": {
                "devType": {
                    "description": "DeviceType represents the type of device like\nsparse, disk, partition, lvm, crypt",
                    "type": "string"
                },
                "formFactor": {
                    "description": "FormFactor is the disk size, like 2.5 inches",
                    "type": "string"
                },
                "modelName": {
                    "description": "ModelName is the name of disk model",
                    "type": "string"
                },
                "pciVendorID": {
                    "description": "PCIVendorID is the ID of the PCI vendor, for NVMe disk only",
                    "type": "string"
                },
                "product": {
                    "description": "Product is a class of disks the vendor produces",
                    "type": "string"
                },
                "protocol": {
                    "description": "Protocol is for data transport, such as ATA, SCSI, NVMe",
                    "type": "string"
                },
                "rotationRate": {
                    "description": "RotationRate is the rate of the disk rotation",
                    "type": "integer"
                },
                "serialNumber": {
                    "description": "SerialNumber is a unique number assigned to a disk",
                    "type": "string"
                },
                "type": {
                    "description": "Type is the disk type, such as ata, scsi, nvme, megaraid,N, ...",
                    "type": "string"
                },
                "vendor": {
                    "description": "Vendor is who provides the disk",
                    "type": "string"
                }
            }
        },
        "v1alpha1.DiskClaimDescription": {
            "type": "object",
            "properties": {
                "capacity": {
                    "description": "Capacity of the disk in bytes",
                    "type": "integer"
                },
                "devicePaths": {
                    "description": "Match the device path of Localdisk\nDevicePaths match all disks if DevicePaths are empty",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "diskType": {
                    "description": "DiskType represents the type of drive like SSD, HDD etc.,\n+optional",
                    "type": "string"
                },
                "localDiskNames": {
                    "description": "Match the name of Localdisk\nLocalDiskNames match all disks if LocalDiskNames are empty",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1alpha1.EventRecord": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "The action is the operation on the resource, such as Migrate a LocalVolume",
                    "type": "string"
                },
                "actionContent": {
                    "description": "The content of the action which is a JSON string",
                    "type": "string"
                },
                "id": {
                    "description": "id is unique",
                    "type": "string"
                },
                "state": {
                    "description": "The state of the action",
                    "type": "string"
                },
                "stateContent": {
                    "description": "The content of the action state which is a JSON string",
                    "type": "string"
                },
                "time": {
                    "description": "The time when does the action happen",
                    "type": "string"
                }
            }
        },
        "v1alpha1.EventSpec": {
            "type": "object",
            "properties": {
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.EventRecord"
                    }
                },
                "resourceName": {
                    "description": "Name of the resource",
                    "type": "string"
                },
                "resourceType": {
                    "description": "HwameiStor resource type: Cluster, LocalStorageNode, LocalDiskNode, Pool,  LocalVolume, LocalDiskVolume, LocalDisk,\n+kubebuilder:validation:Enum:=Cluster;StorageNode;DiskNode;Pool;Volume;DiskVolume;Disk",
                    "type": "string"
                }
            }
        },
        "v1alpha1.EventStatus": {
            "type": "object"
        },
        "v1alpha1.EvictorStatus": {
            "type": "object",
            "properties": {
                "health": {
                    "type": "string"
                },
                "instances": {
                    "$ref": "#/definitions/v1alpha1.DeployStatus"
                }
            }
        },
        "v1alpha1.ExporterStatus": {
            "type": "object",
            "properties": {
                "health": {
                    "type": "string"
                },
                "instances": {
                    "$ref": "#/definitions/v1alpha1.DeployStatus"
                }
            }
        },
        "v1alpha1.FileSystemInfo": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "Type represents the FileSystem type of the disk\n+optional",
                    "type": "string"
                },
                "mountPoint": {
                    "description": "MountPoint represents the mountpoint of the disk\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.HAState": {
            "type": "object",
            "properties": {
                "reason": {
                    "description": "Reason is why this state happened",
                    "type": "string"
                },
                "state": {
                    "description": "Consistent, Inconsistent, replica is ready only when consistent",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.State"
                        }
                    ]
                }
            }
        },
        "v1alpha1.LocalDevice": {
            "type": "object",
            "properties": {
                "capacityBytes": {
                    "description": "disk capacity",
                    "type": "integer"
                },
                "devPath": {
                    "description": "e.g. /dev/sdb",
                    "type": "string"
                },
                "state": {
                    "description": "Possible state: Available, Inuse, Offline",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.State"
                        }
                    ]
                },
                "type": {
                    "description": "Supported: HDD, SSD, NVMe, RAM",
                    "type": "string"
                }
            }
        },
        "v1alpha1.LocalDisk": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.LocalDiskSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.LocalDiskStatus"
                }
            }
        },
        "v1alpha1.LocalDiskClaimSpec": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the disk to be claimed\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.DiskClaimDescription"
                        }
                    ]
                },
                "diskRefs": {
                    "description": "DiskRefs represents which disks are assigned to the LocalDiskClaim\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ObjectReference"
                    }
                },
                "nodeName": {
                    "description": "+kubebuilder:validation:Required\nNodeName represents where disk has to be claimed.",
                    "type": "string"
                },
                "owner": {
                    "description": "Owner represents which system owns this claim(e.g. local-storage, local-disk-manager)\n+kubebuilder:validation:Required",
                    "type": "string"
                }
            }
        },
        "v1alpha1.LocalDiskManagerStatus": {
            "type": "object",
            "properties": {
                "csi": {
                    "$ref": "#/definitions/v1alpha1.DeployStatus"
                },
                "health": {
                    "type": "string"
                },
                "instances": {
                    "$ref": "#/definitions/v1alpha1.DeployStatus"
                }
            }
        },
        "v1alpha1.LocalDiskNode": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.LocalDiskNodeSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.LocalDiskNodeStatus"
                }
            }
        },
        "v1alpha1.LocalDiskNodeSpec": {
            "type": "object",
            "properties": {
                "nodeName": {
                    "description": "NodeName represent where disk is attached",
                    "type": "string"
                }
            }
        },
        "v1alpha1.LocalDiskNodeStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Represents the latest available observations of a localstoragenode's current state.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.StorageNodeCondition"
                    }
                },
                "freeCapacity": {
                    "description": "FreeCapacity indicates the free capacity of all the disks",
                    "type": "integer"
                },
                "freeDisk": {
                    "description": "FreeDisk",
                    "type": "integer"
                },
                "poolExtendRecords": {
                    "description": "PoolExtendRecords record why disks are joined in the pool\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/v1alpha1.LocalDiskClaimSpec"
                        }
                    }
                },
                "pools": {
                    "description": "There may have multiple storage pools in a node.\ne.g. HDD_POOL, SSD_POOL, NVMe_POOL\nPools: poolName -\u003e LocalPool",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/v1alpha1.LocalPool"
                    }
                },
                "state": {
                    "description": "State of the Local Storage Node/Member: New, Active, Inactive, Failed",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.State"
                        }
                    ]
                },
                "totalCapacity": {
                    "description": "TotalCapacity indicates the capacity of all the disks",
                    "type": "integer"
                },
                "totalDisk": {
                    "description": "TotalDisk",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.LocalDiskSpec": {
            "type": "object",
            "properties": {
                "capacity": {
                    "description": "Capacity of the disk in bytes",
                    "type": "integer"
                },
                "claimRef": {
                    "description": "ClaimRef is the reference to the LDC which has claimed this LD\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectReference"
                        }
                    ]
                },
                "devLinks": {
                    "description": "DevLinks are symbol links for this device",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "devicePath": {
                    "description": "DevicePath is the disk path in the OS",
                    "type": "string"
                },
                "diskAttributes": {
                    "description": "DiskAttributes has hardware/static attributes of the disk",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.DiskAttributes"
                        }
                    ]
                },
                "isRaid": {
                    "description": "HasRAID identifies if the disk is a raid disk or not",
                    "type": "boolean"
                },
                "major": {
                    "description": "Major represents drive used by the device\n+optional",
                    "type": "string"
                },
                "minor": {
                    "description": "Minor is used to distinguish different devices\n+optional",
                    "type": "string"
                },
                "nodeName": {
                    "description": "NodeName represents the node where the disk is attached\n+kubebuilder:validation:Required",
                    "type": "string"
                },
                "owner": {
                    "description": "Owner represents which system owns this claim(e.g. local-storage, local-disk-manager)\n+optional",
                    "type": "string"
                },
                "partitionInfo": {
                    "description": "PartitionInfo contains partition information\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.PartitionInfo"
                    }
                },
                "partitioned": {
                    "description": "HasPartition represents if the disk has partitions or not",
                    "type": "boolean"
                },
                "preDevicePath": {
                    "description": "PreDevicePath represents the last device path in the OS",
                    "type": "string"
                },
                "preNodeName": {
                    "description": "PreNodeName represents the node where the disk was attached",
                    "type": "string"
                },
                "raidInfo": {
                    "description": "RAIDInfo contains RAID information\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.RAIDInfo"
                        }
                    ]
                },
                "reserved": {
                    "description": "Reserved represents the disk won't be used in hwameistor later, until it becomes unreserved\n+optional",
                    "type": "boolean"
                },
                "smartInfo": {
                    "description": "SmartInfo contains infos collected by smartctl\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.SmartInfo"
                        }
                    ]
                },
                "state": {
                    "description": "State is the current state of the disk (Active/Inactive/Unknown)\n+kubebuilder:validation:Enum:=Active;Inactive;Unknown",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.LocalDiskState"
                        }
                    ]
                },
                "supportSmart": {
                    "description": "HasSmartInfo identified if the disk supports SMART or not",
                    "type": "boolean"
                },
                "uuid": {
                    "description": "UUID global unique identifier of the disk",
                    "type": "string"
                }
            }
        },
        "v1alpha1.LocalDiskState": {
            "type": "string",
            "enum": [
                "Active",
                "Inactive",
                "Unknown",
                "",
                "Pending",
                "Available",
                "Bound"
            ],
            "x-enum-varnames": [
                "LocalDiskActive",
                "LocalDiskInactive",
                "LocalDiskUnknown",
                "LocalDiskEmpty",
                "LocalDiskPending",
                "LocalDiskAvailable",
                "LocalDiskBound"
            ]
        },
        "v1alpha1.LocalDiskStatus": {
            "type": "object",
            "properties": {
                "claimState": {
                    "description": "State represents the claim state of the disk\n+kubebuilder:validation:Enum:=Bound;Reserved;Available;Pending",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.LocalDiskState"
                        }
                    ]
                }
            }
        },
        "v1alpha1.LocalPool": {
            "type": "object",
            "properties": {
                "class": {
                    "description": "Supported class: HDD, SSD, NVMe\n+kubebuilder:validation:Enum:=HDD;SSD;NVMe",
                    "type": "string"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.LocalDevice"
                    }
                },
                "freeCapacityBytes": {
                    "type": "integer"
                },
                "freeVolumeCount": {
                    "type": "integer"
                },
                "name": {
                    "description": "Supported pool name: HDD_POOL, SSD_POOL, NVMe_POOL",
                    "type": "string"
                },
                "path": {
                    "description": "VG path",
                    "type": "string"
                },
                "totalCapacityBytes": {
                    "type": "integer"
                },
                "totalVolumeCount": {
                    "type": "integer"
                },
                "type": {
                    "description": "Supported type: REGULAR\n+kubebuilder:validation:Enum:=REGULAR\n+kubebuilder:default:=REGULAR",
                    "type": "string"
                },
                "usedCapacityBytes": {
                    "type": "integer"
                },
                "usedVolumeCount": {
                    "type": "integer"
                },
                "volumeCapacityBytesLimit": {
                    "type": "integer"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1alpha1.LocalStorageNode": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.LocalStorageNodeSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.LocalStorageNodeStatus"
                }
            }
        },
        "v1alpha1.LocalStorageNodeSpec": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "storageIP": {
                    "description": "IPv4 address is for HA replication traffic",
                    "type": "string"
                },
                "topogoly": {
                    "$ref": "#/definitions/v1alpha1.Topology"
                }
            }
        },
        "v1alpha1.LocalStorageNodeStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Represents the latest available observations of a localstoragenode's current state.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.StorageNodeCondition"
                    }
                },
                "poolExtendRecords": {
                    "description": "PoolExtendRecords record why disks are joined in the pool\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/v1alpha1.LocalDiskClaimSpec"
                        }
                    }
                },
                "pools": {
                    "description": "There may have multiple storage pools in a node.\ne.g. HDD_POOL, SSD_POOL, NVMe_POOL\nPools: poolName -\u003e LocalPool",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/v1alpha1.LocalPool"
                    }
                },
                "state": {
                    "description": "State of the Local Storage Node/Member: New, Active, Inactive, Failed",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.State"
                        }
                    ]
                }
            }
        },
        "v1alpha1.LocalStorageStatus": {
            "type": "object",
            "properties": {
                "csi": {
                    "$ref": "#/definitions/v1alpha1.DeployStatus"
                },
                "health": {
                    "type": "string"
                },
                "instances": {
                    "$ref": "#/definitions/v1alpha1.DeployStatus"
                }
            }
        },
        "v1alpha1.LocalVolume": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeSpec"
                },
                "status": {
                    "$ref": "#/definitions/v1alpha1.LocalVolumeStatus"
                }
            }
        },
        "v1alpha1.LocalVolumeConvertSpec": {
            "type": "object",
            "properties": {
                "abort": {
                    "description": "+kubebuilder:default:=false",
                    "type": "boolean"
                },
                "replicaNumber": {
                    "description": "ReplicaNumber is the number of replicas which the volume will be converted to\ncurrently, only support the case of converting a non-HA volume to HA\n+kubebuilder:validation:Minimum:=2\n+kubebuilder:validation:Maximum:=2",
                    "type": "integer"
                },
                "volumeName": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.LocalVolumeConvertStatus": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/v1alpha1.State"
                }
            }
        },
        "v1alpha1.LocalVolumeExpandSpec": {
            "type": "object",
            "properties": {
                "abort": {
                    "description": "+kubebuilder:default:=false",
                    "type": "boolean"
                },
                "requiredCapacityBytes": {
                    "description": "+kubebuilder:validation:Minimum:=4194304",
                    "type": "integer"
                },
                "volumeName": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.LocalVolumeExpandStatus": {
            "type": "object",
            "properties": {
                "allocatedCapacityBytes": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/v1alpha1.State"
                },
                "subs": {
                    "description": "sub resources at different node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1alpha1.LocalVolumeGroupSpec": {
            "type": "object",
            "properties": {
                "accessibility": {
                    "description": "Accessibility is the topology requirement of the volume. It describes how to locate and distribute the volume replicas",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.AccessibilityTopology"
                        }
                    ]
                },
                "namespace": {
                    "type": "string"
                },
                "pods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "volumes": {
                    "description": "Volumes is the collection of the volumes in the group",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.VolumeInfo"
                    }
                }
            }
        },
        "v1alpha1.LocalVolumeGroupStatus": {
            "type": "object"
        },
        "v1alpha1.LocalVolumeMigrateSpec": {
            "type": "object",
            "properties": {
                "abort": {
                    "description": "+kubebuilder:default:=false",
                    "type": "boolean"
                },
                "migrateAllVols": {
                    "description": "+kubebuilder:default:=true",
                    "type": "boolean"
                },
                "sourceNode": {
                    "description": "source NodeNames",
                    "type": "string"
                },
                "targetNodesSuggested": {
                    "description": "suggested target NodeNames",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "volumeName": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.LocalVolumeMigrateStatus": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "error message to describe some states",
                    "type": "string"
                },
                "originalReplicaNumber": {
                    "description": "record the volume's replica number, it will be set internally",
                    "type": "integer"
                },
                "state": {
                    "description": "State of the operation, e.g. submitted, started, completed, abort, ...",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.State"
                        }
                    ]
                },
                "targetNode": {
                    "description": "record the node where the specified replica is migrated to",
                    "type": "string"
                },
                "volumes": {
                    "description": "record all the volumes to be migrated",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1alpha1.LocalVolumeReplicaSpec": {
            "type": "object",
            "properties": {
                "delete": {
                    "description": "Delete is to indicate where the replica should be deleted or not.\nIt's different from the regular resource delete interface in Kubernetes.\nThe purpose is to protect it from any mistakes\n+kubebuilder:default:=false",
                    "type": "boolean"
                },
                "nodeName": {
                    "description": "NodeName is the assigned node where the volume replica is located",
                    "type": "string"
                },
                "poolName": {
                    "description": "PoolName is the name of the storage pool, e.g. LocalStorage_PoolHDD, LocalStorage_PoolSSD, etc..",
                    "type": "string"
                },
                "requiredCapacityBytes": {
                    "description": "+kubebuilder:validation:Minimum:=4194304",
                    "type": "integer"
                },
                "volumeName": {
                    "description": "VolumeName is the name of the volume, e.g. pvc-fbf3ffc3-66db-4dae-9032-bda3c61b8f85",
                    "type": "string"
                },
                "volumeQoS": {
                    "description": "VolumeQoS is the QoS of the volume",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.VolumeQoS"
                        }
                    ]
                }
            }
        },
        "v1alpha1.LocalVolumeReplicaStatus": {
            "type": "object",
            "properties": {
                "allocatedCapacityBytes": {
                    "description": "AllocatedCapacityBytes is the real allocated capacity in bytes",
                    "type": "integer"
                },
                "devPath": {
                    "description": "DevicePath is a link path of the StoragePath of the volume replica,\ne.g. /dev/LocalStorage_PoolHDD/pvc-fbf3ffc3-66db-4dae-9032-bda3c61b8f85",
                    "type": "string"
                },
                "disks": {
                    "description": "Disks is a list of physical disks where the volume replica is spread cross, especially for striped LVM volume replica",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "haState": {
                    "description": "HAState is state for ha replica, replica.Status.State == Ready only when HAState is Consistent of nil",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.HAState"
                        }
                    ]
                },
                "inuse": {
                    "description": "InUse is one of volume replica's states, which indicates the replica is used by a Pod or not\n+kubebuilder:default:=false",
                    "type": "boolean"
                },
                "state": {
                    "description": "State is the phase of volume replica, e.g. Creating, Ready, NotReady, ToBeDeleted, Deleted",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.State"
                        }
                    ]
                },
                "storagePath": {
                    "description": "StoragePath is a real path of the volume replica, like /dev/sdg.",
                    "type": "string"
                },
                "synced": {
                    "description": "Synced is the sync state of the volume replica, which is important in HA volume\n+kubebuilder:default:=false",
                    "type": "boolean"
                }
            }
        },
        "v1alpha1.LocalVolumeSnapshotSpec": {
            "type": "object",
            "properties": {
                "accessibility": {
                    "description": "NOTE: We only take snapshots on the volume replica exist at the moment!\nAccessibility is the topology requirement of the volume snapshot. It describes how to locate and distribute the volume replicas snapshot.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.AccessibilityTopology"
                        }
                    ]
                },
                "delete": {
                    "description": "+kubebuilder:default:=false",
                    "type": "boolean"
                },
                "requiredCapacityBytes": {
                    "description": "RequiredCapacityBytes specifies the space reserved for the snapshot\n+kubebuilder:validation:Required\n+kubebuilder:validation:Minimum:=4194304",
                    "type": "integer"
                },
                "sourceVolume": {
                    "description": "SourceVolume specifies the source volume of the snapshot\n+kubebuilder:validation:Required",
                    "type": "string"
                }
            }
        },
        "v1alpha1.LocalVolumeSnapshotStatus": {
            "type": "object",
            "properties": {
                "allocatedCapacityBytes": {
                    "description": "AllocatedCapacityBytes is the real allocated capacity in bytes\nIn case of HA volume with multiple replicas, the value is equal to the one of a replica's snapshot size",
                    "type": "integer"
                },
                "attr": {
                    "description": "Attribute indicates attr on snapshot",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.VolumeSnapshotAttr"
                        }
                    ]
                },
                "creationTime": {
                    "description": "CreationTime is the host real snapshot creation time\nIn case of HA volume with multiple replicas, the value is equal to the one of a replica's snapshot creation time",
                    "type": "string"
                },
                "message": {
                    "description": "Message error message to describe some states",
                    "type": "string"
                },
                "replicaSnapshots": {
                    "description": "ReplicaSnapshots represents the actual snapshots of replica",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "state": {
                    "description": "State is the phase of volume replica, e.g. Creating, Ready, NotReady, ToBeDeleted, Deleted",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.State"
                        }
                    ]
                }
            }
        },
        "v1alpha1.LocalVolumeSpec": {
            "type": "object",
            "properties": {
                "accessibility": {
                    "description": "Accessibility is the topology requirement of the volume. It describes how to locate and distribute the volume replicas",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.AccessibilityTopology"
                        }
                    ]
                },
                "config": {
                    "description": "Config is the configration for the volume replicas\nIt will be managed by the controller, and watched by all the nodes\nImportant: node will manage volume replica according this config",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.VolumeConfig"
                        }
                    ]
                },
                "convertible": {
                    "description": "Convertible is to indicate if the non-HA volume can be transitted to HA volume or not\n+kubebuilder:default:=false",
                    "type": "boolean"
                },
                "delete": {
                    "description": "Delete is to indicate where the replica should be deleted or not.\nIt's different from the regular resource delete interface in Kubernetes.\nThe purpose is to protect it from any mistakes\n+kubebuilder:default:=false",
                    "type": "boolean"
                },
                "poolName": {
                    "description": "PoolName is the name of the storage pool, e.g. LocalStorage_PoolHDD, LocalStorage_PoolSSD, etc..",
                    "type": "string"
                },
                "pvcName": {
                    "description": "PersistentVolumeClaimName is the name of the associated PVC",
                    "type": "string"
                },
                "pvcNamespace": {
                    "description": "PersistentVolumeClaimNamespace is the namespace of the associated PVC",
                    "type": "string"
                },
                "replicaNumber": {
                    "description": "replica number: 1 - non-HA, 2 - HA, 4 - migration (temp)\n+kubebuilder:validation:Minimum:=1\n+kubebuilder:validation:Maximum:=4",
                    "type": "integer"
                },
                "requiredCapacityBytes": {
                    "description": "+kubebuilder:validation:Minimum:=4194304",
                    "type": "integer"
                },
                "volumeQoS": {
                    "description": "VolumeQoS is the QoS of the volume",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.VolumeQoS"
                        }
                    ]
                },
                "volumegroup": {
                    "description": "VolumeGroup is the group name of the local volumes. It is designed for the scheduling and allocating.",
                    "type": "string"
                }
            }
        },
        "v1alpha1.LocalVolumeStatus": {
            "type": "object",
            "properties": {
                "allocatedCapacityBytes": {
                    "description": "AllocatedCapacityBytes is the real allocated capacity in bytes of the volume replicas.\nIn case of HA volume with multiple replicas, the value is equal to the one of a replica's size",
                    "type": "integer"
                },
                "fsType": {
                    "description": "PublishedFSType is the fstype on this volume",
                    "type": "string"
                },
                "publishedNode": {
                    "description": "PublishedNodeName is the node where the volume is published and used by pod",
                    "type": "string"
                },
                "rawblock": {
                    "description": "PublishedRawBlock is for raw block\n+kubebuilder:default:=false",
                    "type": "boolean"
                },
                "replicas": {
                    "description": "Volume is a logical concept and composed by one or many replicas which will be located at different node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "state": {
                    "description": "State is the phase of volume replica, e.g. Creating, Ready, NotReady, ToBeDeleted, Deleted",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.State"
                        }
                    ]
                },
                "totalInode": {
                    "description": "TotalINodes is the total inodes of the volume's filesystem",
                    "type": "integer"
                },
                "usedCapacityBytes": {
                    "description": "UsedCapacityBytes is the used capacity in bytes of the volume, which is available only for filesystem",
                    "type": "integer"
                },
                "usedInode": {
                    "description": "UsedInode is the used inodes of the volume's filesystem",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.PartitionInfo": {
            "type": "object",
            "properties": {
                "filesystem": {
                    "description": "FileSystem contains mount point and filesystem type\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.FileSystemInfo"
                        }
                    ]
                },
                "hasFileSystem": {
                    "description": "HasFileSystem represents whether the filesystem is included",
                    "type": "boolean"
                },
                "path": {
                    "description": "Path represents the partition path in the OS",
                    "type": "string"
                }
            }
        },
        "v1alpha1.PodStatus": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "node": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.RAIDInfo": {
            "type": "object",
            "properties": {
                "raidMaster": {
                    "description": "RAIDMaster is the master of the RAID disk, it works for only RAID slave disk, e.g. /dev/bus/0",
                    "type": "string"
                }
            }
        },
        "v1alpha1.SchedulerStatus": {
            "type": "object",
            "properties": {
                "health": {
                    "type": "string"
                },
                "instances": {
                    "$ref": "#/definitions/v1alpha1.DeployStatus"
                }
            }
        },
        "v1alpha1.SmartAssessResult": {
            "type": "string",
            "enum": [
                "Passed",
                "Failed"
            ],
            "x-enum-varnames": [
                "AssessPassed",
                "AssessFailed"
            ]
        },
        "v1alpha1.SmartInfo": {
            "type": "object",
            "properties": {
                "overallHealth": {
                    "description": "OverallHealth identifies if the disk is healthy or not",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.SmartAssessResult"
                        }
                    ]
                }
            }
        },
        "v1alpha1.State": {
            "type": "string",
            "enum": [
                "",
                "ToBeMounted",
                "ToBeUnMount",
                "Mounted",
                "NotReady",
                "Ready",
                "Maintain",
                "Offline",
                "ToBeMounted",
                "",
                "Created",
                "Creating",
                "Ready",
                "NotReady",
                "ToBeDeleted",
                "Deleted",
                "Invalid",
                "Creating",
                "Ready",
                "NotReady",
                "ToBeDeleted",
                "Deleted",
                "Consistent",
                "Inconsistent",
                "Up",
                "Down",
                "Submitted",
                "AddReplica",
                "SyncReplica",
                "PruneReplica",
                "InProgress",
                "Completed",
                "ToBeAborted",
                "Cancelled",
                "Aborted",
                "Failed",
                "Available",
                "InUse",
                "Offline"
            ],
            "x-enum-varnames": [
                "MountPointStateEmpty",
                "MountPointToBeMounted",
                "MountPointToBeUnMount",
                "MountPointMounted",
                "MountPointNotReady",
                "NodeStateReady",
                "NodeStateMaintain",
                "NodeStateOffline",
                "VolumeStateToBeUnmount",
                "VolumeStateEmpty",
                "VolumeStateCreated",
                "VolumeStateCreating",
                "VolumeStateReady",
                "VolumeStateNotReady",
                "VolumeStateToBeDeleted",
                "VolumeStateDeleted",
                "VolumeReplicaStateInvalid",
                "VolumeReplicaStateCreating",
                "VolumeReplicaStateReady",
                "VolumeReplicaStateNotReady",
                "VolumeReplicaStateToBeDeleted",
                "VolumeReplicaStateDeleted",
                "HAVolumeReplicaStateConsistent",
                "HAVolumeReplicaStateInconsistent",
                "HAVolumeReplicaStateUp",
                "HAVolumeReplicaStateDown",
                "OperationStateSubmitted",
                "OperationStateMigrateAddReplica",
                "OperationStateMigrateSyncReplica",
                "OperationStateMigratePruneReplica",
                "OperationStateInProgress",
                "OperationStateCompleted",
                "OperationStateToBeAborted",
                "OperationStateAborting",
                "OperationStateAborted",
                "OperationStateFailed",
                "DiskStateAvailable",
                "DiskStateInUse",
                "DiskStateOffline"
            ]
        },
        "v1alpha1.StorageNodeCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "type": "string"
                },
                "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "type": "string"
                },
                "message": {
                    "description": "A human-readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_hwameistor_hwameistor_pkg_apis_hwameistor_v1alpha1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type of localstoragenode condition.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1alpha1.StorageNodeConditionType"
                        }
                    ]
                }
            }
        },
        "v1alpha1.StorageNodeConditionType": {
            "type": "string",
            "enum": [
                "Available",
                "UnAvailable",
                "Progressing",
                "ExpandFailure",
                "ExpandSuccess"
            ],
            "x-enum-varnames": [
                "StorageAvailable",
                "StorageUnAvailable",
                "StorageProgressing",
                "StorageExpandFailure",
                "StorageExpandSuccess"
            ]
        },
        "v1alpha1.Topology": {
            "type": "object",
            "properties": {
                "region": {
                    "description": "Region is a collection of Zones\n+kubebuilder:default:=default",
                    "type": "string"
                },
                "zone": {
                    "description": "Zone is a collection of Local Storage Nodes\n+kubebuilder:default:=default",
                    "type": "string"
                }
            }
        },
        "v1alpha1.VolumeConfig": {
            "type": "object",
            "properties": {
                "convertible": {
                    "description": "Convertible is to indicate if the non-HA volume can be transitted to HA volume or not",
                    "type": "boolean"
                },
                "initialized": {
                    "type": "boolean"
                },
                "readyToInitialize": {
                    "type": "boolean"
                },
                "replicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.VolumeReplica"
                    }
                },
                "requiredCapacityBytes": {
                    "type": "integer"
                },
                "resourceID": {
                    "description": "ResourceID is for HA volume, set to '-1' for non-HA volume",
                    "type": "integer"
                },
                "version": {
                    "description": "Version of config, start from 0, plus 1 every time config update",
                    "type": "integer"
                },
                "volumeName": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.VolumeInfo": {
            "type": "object",
            "properties": {
                "localvolume": {
                    "description": "LocalVolumeName is the name of the LocalVolume",
                    "type": "string"
                },
                "pvc": {
                    "description": "PersistentVolumeClaimName is the name of the associated PVC",
                    "type": "string"
                }
            }
        },
        "v1alpha1.VolumeQoS": {
            "type": "object",
            "properties": {
                "iops": {
                    "description": "IOPS defines the IOPS of the volume",
                    "type": "string"
                },
                "throughput": {
                    "description": "Throughput defines the throughput of the volume",
                    "type": "string"
                }
            }
        },
        "v1alpha1.VolumeReplica": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ip": {
                    "type": "string"
                },
                "primary": {
                    "type": "boolean"
                }
            }
        },
        "v1alpha1.VolumeSnapshotAttr": {
            "type": "object",
            "properties": {
                "invalid": {
                    "description": "Invalid set true if snapshot is expiration",
                    "type": "boolean"
                },
                "merging": {
                    "description": "Merging set true if snapshot is merging now",
                    "type": "boolean"
                }
            }
        }
    }
}