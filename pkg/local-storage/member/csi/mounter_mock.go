// Code generated by MockGen. DO NOT EDIT.
// Source: mounter.go

// Package csi is a generated GoMock package.
package csi

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMounter is a mock of Mounter interface.
type MockMounter struct {
	ctrl     *gomock.Controller
	recorder *MockMounterMockRecorder
}

// MockMounterMockRecorder is the mock recorder for MockMounter.
type MockMounterMockRecorder struct {
	mock *MockMounter
}

// NewMockMounter creates a new mock instance.
func NewMockMounter(ctrl *gomock.Controller) *MockMounter {
	mock := &MockMounter{ctrl: ctrl}
	mock.recorder = &MockMounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMounter) EXPECT() *MockMounterMockRecorder {
	return m.recorder
}

// BindMount mocks base method.
func (m *MockMounter) BindMount(devPath, mountpoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindMount", devPath, mountpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindMount indicates an expected call of BindMount.
func (mr *MockMounterMockRecorder) BindMount(devPath, mountpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindMount", reflect.TypeOf((*MockMounter)(nil).BindMount), devPath, mountpoint)
}

// FormatAndMount mocks base method.
func (m *MockMounter) FormatAndMount(devPath, mountpoint, fsType string, flags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatAndMount", devPath, mountpoint, fsType, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// FormatAndMount indicates an expected call of FormatAndMount.
func (mr *MockMounterMockRecorder) FormatAndMount(devPath, mountpoint, fsType, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatAndMount", reflect.TypeOf((*MockMounter)(nil).FormatAndMount), devPath, mountpoint, fsType, flags)
}

// GetDeviceMountPoints mocks base method.
func (m *MockMounter) GetDeviceMountPoints(devPath string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMountPoints", devPath)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetDeviceMountPoints indicates an expected call of GetDeviceMountPoints.
func (mr *MockMounterMockRecorder) GetDeviceMountPoints(devPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMountPoints", reflect.TypeOf((*MockMounter)(nil).GetDeviceMountPoints), devPath)
}

// MountRawBlock mocks base method.
func (m *MockMounter) MountRawBlock(devPath, mountpoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountRawBlock", devPath, mountpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountRawBlock indicates an expected call of MountRawBlock.
func (mr *MockMounterMockRecorder) MountRawBlock(devPath, mountpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountRawBlock", reflect.TypeOf((*MockMounter)(nil).MountRawBlock), devPath, mountpoint)
}

// NeedResize mocks base method.
func (m *MockMounter) NeedResize(devicePath, deviceMountPath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedResize", devicePath, deviceMountPath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeedResize indicates an expected call of NeedResize.
func (mr *MockMounterMockRecorder) NeedResize(devicePath, deviceMountPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedResize", reflect.TypeOf((*MockMounter)(nil).NeedResize), devicePath, deviceMountPath)
}

// Unmount mocks base method.
func (m *MockMounter) Unmount(mountpoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", mountpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount.
func (mr *MockMounterMockRecorder) Unmount(mountpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockMounter)(nil).Unmount), mountpoint)
}
