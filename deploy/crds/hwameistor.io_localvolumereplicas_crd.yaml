apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: localvolumereplicas.hwameistor.io
spec:
  group: hwameistor.io
  names:
    kind: LocalVolumeReplica
    listKind: LocalVolumeReplicaList
    plural: localvolumereplicas
    shortNames:
    - lvr
    singular: localvolumereplica
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: Required capacity of the volume replica
      jsonPath: .spec.requiredCapacityBytes
      name: capacity
      type: integer
    - description: Node name where the volume replica is located at
      jsonPath: .spec.nodeName
      name: node
      type: string
    - description: State of the volume replica
      jsonPath: .status.state
      name: state
      type: string
    - description: Sync status of the volume replica
      jsonPath: .status.synced
      name: synced
      type: boolean
    - description: Device path of the volume replica
      jsonPath: .status.devPath
      name: device
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LocalVolumeReplica is the Schema for the volumereplicas API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: LocalVolumeReplicaSpec defines the desired state of LocalVolumeReplica
            properties:
              delete:
                default: false
                description: Delete is to indicate where the replica should be deleted
                  or not. It's different from the regular resource delete interface
                  in Kubernetes. The purpose is to protect it from any mistakes
                type: boolean
              nodeName:
                description: NodeName is the assigned node where the volume replica
                  is located
                type: string
              poolName:
                description: PoolName is the name of the storage pool, e.g. LocalStorage_PoolHDD,
                  LocalStorage_PoolSSD, etc..
                type: string
              requiredCapacityBytes:
                format: int64
                minimum: 4194304
                type: integer
              thin:
                description: Thin is to indicate if the volume is thin provisioned
                  or not
                type: boolean
              thinOriginVolume:
                description: ThinOriginVolume is the name of the volume from which
                  the thin volume is created
                type: string
              volumeEncrypt:
                description: VolumeEncrypt is the encryption config of the volume
                properties:
                  enable:
                    default: false
                    description: Enable is to indicate if the volume should be encrypted
                      or not
                    type: boolean
                  secret:
                    description: Secret is the key for encryption Don't set secret
                      directly, fetch it from apiserver by name
                    type: string
                  type:
                    default: LUKS
                    description: Type is the encryption type, e.g., LUKS
                    enum:
                    - LUKS
                    type: string
                type: object
              volumeName:
                description: VolumeName is the name of the volume, e.g. pvc-fbf3ffc3-66db-4dae-9032-bda3c61b8f85
                type: string
              volumeQoS:
                description: VolumeQoS is the QoS of the volume
                properties:
                  iops:
                    description: IOPS defines the IOPS of the volume
                    type: string
                  throughput:
                    description: Throughput defines the throughput of the volume
                    type: string
                type: object
            type: object
          status:
            description: LocalVolumeReplicaStatus defines the observed state of LocalVolumeReplica
            properties:
              allocatedCapacityBytes:
                description: AllocatedCapacityBytes is the real allocated capacity
                  in bytes
                format: int64
                type: integer
              conditions:
                description: Conditions records the information of the volume replica
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              devPath:
                description: DevicePath is a link path of the StoragePath of the volume
                  replica, e.g. /dev/LocalStorage_PoolHDD/pvc-fbf3ffc3-66db-4dae-9032-bda3c61b8f85
                type: string
              disks:
                description: Disks is a list of physical disks where the volume replica
                  is spread cross, especially for striped LVM volume replica
                items:
                  type: string
                type: array
              haState:
                description: HAState is state for ha replica, replica.Status.State
                  == Ready only when HAState is Consistent of nil
                properties:
                  reason:
                    description: Reason is why this state happened
                    type: string
                  state:
                    description: Consistent, Inconsistent, replica is ready only when
                      consistent
                    type: string
                required:
                - state
                type: object
              inuse:
                default: false
                description: InUse is one of volume replica's states, which indicates
                  the replica is used by a Pod or not
                type: boolean
              state:
                description: State is the phase of volume replica, e.g. Creating,
                  Ready, NotReady, ToBeDeleted, Deleted
                type: string
              storagePath:
                description: StoragePath is a real path of the volume replica, like
                  /dev/sdg.
                type: string
              synced:
                default: false
                description: Synced is the sync state of the volume replica, which
                  is important in HA volume
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
